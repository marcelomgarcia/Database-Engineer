Picture yourself in the
following scenario. You're managing the database
of a large online store. Your database must be able to retrieve the customer's
details from one table and then find the order recorded
against another table. How does the database establish a relationship between
these pieces of data? Over the next few minutes, you'll explore this process
and by the end of this video, you'll be able to explain why data in a database should be related and identify an instance of related data in a database. Data stored in a database
cannot exist in isolation. It must have a relationship
with other data so that it can be processed
into meaningful information. How do you make sure
that all the data in your database is related? Let's explore how
data is related by using the online
store as our example. In the database of
your online store, you could have an order
table and a customer table. To locate the details
of a customer's order, you will check the order number
against the customer ID. In other words, the
database establishes a link between the
data in the tables. Let's look at the customer
table in more detail. In this table, the
columns are Customer ID, FirstName, LastName, and Email. In relational database
terms, these are fields. Then there are
several rows which contain data for each
of these fields. In relational databases, they're known as records of the table. All these fields and rows work together to store
information on the customer, also known as the entity. Every row and record
in the customer table is an instance of
the customer entity. For example, Sarah Hogan, who is a customer ID of C1, is one customer instance
and Katrina Langley, who is a customer ID of C4 is
another customer instance. What's most important
is that each of these customer instances or records must be
uniquely identifiable. But what if two or more
customers share similar info, like the same first
name or last name. To avoid this confusion
within the database, you can use a field
that contains only unique values
like the customer ID. This is called a
primary key field. It contains unique
values that cannot be replicated elsewhere
in the table. Even if two customers
share the same name, they'll still have
separate customer IDs. This means that
your database can determine which customer
is the required one. Let's look at the
order table next. Just like the customer table, the order table also
has fields and records. In this table, the primary
key field is the order ID. But there's also a
field named customer ID with the exact same data
as the customer data. What is the purpose of the
customer ID in this table? The Customer ID is there to help identify who it is
that place the order. By adding the customer ID
field to the order table, our relationship is
established between the customer table
and the order table. Because of this relationship, you can pull data in a
meaningful way from both tables. The customer ID field in the order table is known
as the foreign key field. A foreign key is a
field in one table that connects to the primary key
field in the original table, which in this case is
the customer table. The customer ID is the primary
key of the customer table, but it becomes a foreign
key in the order table. This way, the relationship
is established and the data in these
two tables are related. You should now be
able to explain the relationships
between data in a database and identify instances of related
data. Great work.